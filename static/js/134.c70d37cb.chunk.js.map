{"version":3,"file":"static/js/134.c70d37cb.chunk.js","mappings":"4OAIe,SAASA,IACtB,OAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACAC,QAAQC,IAAI,eAAgBH,GAoC5B,OAhBAI,EAAAA,EAAAA,YAAU,WACW,KAAfT,GAGJU,EAAAA,EAAAA,IAAA,mGAEgGV,IAE7FW,MAAK,SAAAC,GACJb,EAAca,EAAIC,KAAKC,QACxB,IACAC,OAAM,SAAAC,GACLT,QAAQC,IAAIQ,EACb,GACJ,GAAE,CAAChB,KAGF,iCACE,kBAAMiB,SAzBW,SAAAC,GACnBA,EAAEC,iBACFlB,EAAciB,EAAEE,cAAcC,SAAS,GAAGC,OAC1CvB,GAAc,GACdmB,EAAEK,OAAOC,OACV,EAoBG,WACE,kBACEC,KAAK,OACLC,YAAY,yBACZC,SArCkB,SAAAC,GACxB,IAAMC,EAAeD,EAAIL,OAAOD,MAChC,GAAqB,KAAjBO,EACF,OAAOvB,EAAgB,CAAC,GAE1BA,EAAgB,CAAEwB,MAAOD,GAC1B,KAiCK,mBAAQJ,KAAK,SAAb,wBAEF,wBACG3B,EAAWiC,OAAS,EACjBjC,EAAWkC,KACT,YAAwD,IAArDC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,eAAgBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,YACnC,OACE,yBACE,2BACE,UAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMrC,GAA1C,UACGgC,GACD,0BACE,gBACEM,IAAG,0CAAqCJ,GACxCK,IAAKP,EACLQ,MAAM,MACNC,OAAO,cAIb,0CAEE,gCAAQV,GAA8B,oBAfnCE,EAoBZ,IAEH,SAIX,C","sources":["pages/Movies.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nexport default function Movies() {\n  const [searchFilm, setSearchFilm] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  console.log('searchParams', searchParams);\n  // const movieId = searchParams.get('movieId') ?? '';\n  // console.log('searchParams', searchParams.get('a'))\n\n\n  const updateQueryString = evt => {\n    const movieIdValue = evt.target.value;\n    if (movieIdValue === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query: movieIdValue });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setInputValue(e.currentTarget.elements[0].value);\n    setSearchFilm(true);\n    e.target.reset();\n  };\n\n  useEffect(() => {\n    if (inputValue === '') {\n      return;\n    }\n    axios\n      .get(\n        `https://api.themoviedb.org/3/search/movie?api_key=d0540c3f94b98f357d5d7224e563e83f&query=${inputValue}`\n      )\n      .then(res => {\n        setSearchFilm(res.data.results);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [inputValue]);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Please enter film name\"\n          onChange={updateQueryString}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {searchFilm.length > 0\n          ? searchFilm.map(\n              ({ release_date, original_title, id, poster_path }) => {\n                return (\n                  <ul key={id}>\n                    <li>\n                      <Link to={`/movies/${id}`} state={{ from: location }}>\n                        {original_title}\n                        <div>\n                          <img\n                            src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n                            alt={original_title}\n                            width=\"300\"\n                            height=\"400\"\n                          />\n                        </div>\n                      </Link>\n                      <p>\n                        Release Date:\n                        <span> {release_date ? release_date : 'No date'}</span>\n                      </p>\n                    </li>\n                  </ul>\n                );\n              }\n            )\n          : null}\n      </ul>\n    </>\n  );\n}\n\n// import { useState } from 'react';\n// import { Link, useLocation, useSearchParams } from 'react-router-dom';\n\n// export default function Movies() {\n//   const [searchTerm, setSearchTerm] = useState([]);\n//   const location = useLocation();\n//   const [searchParams, setSearchParams] = useSearchParams();\n//   const movieId = searchParams.get('movieId') ?? '';\n//   // console.log('searchParams', searchParams.get('a'))\n\n//   const updateQueryString = evt => {\n//     const movieIdValue = evt.target.value;\n//     if (movieIdValue === '') {\n//       return setSearchParams({});\n//     }\n//     setSearchParams({ movieId: movieIdValue });\n//   };\n\n//   const visibleMovies = searchTerm.filter(movie => movie.includes(movieId));\n\n//   console.log('location', location);\n\n//   return (\n//     <div>\n//       <form>\n//         <input\n//           type=\"search\"\n//           placeholder=\"Search movie\"\n//           value={searchTerm}\n//           // onChange={handleInputChange}\n//         />\n//         <button type=\"submit\">Search</button>\n//       </form>\n//       <ul>\n//         {searchTerm.map(movie => (\n//           <li key={movie.id}>\n//             <Link to={`/movie/${movie.id}`} state={{ from: location }}>\n//               {movie.title}\n//             </Link>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n"],"names":["Movies","useState","searchFilm","setSearchFilm","inputValue","setInputValue","location","useLocation","useSearchParams","searchParams","setSearchParams","console","log","useEffect","axios","then","res","data","results","catch","error","onSubmit","e","preventDefault","currentTarget","elements","value","target","reset","type","placeholder","onChange","evt","movieIdValue","query","length","map","release_date","original_title","id","poster_path","to","state","from","src","alt","width","height"],"sourceRoot":""}